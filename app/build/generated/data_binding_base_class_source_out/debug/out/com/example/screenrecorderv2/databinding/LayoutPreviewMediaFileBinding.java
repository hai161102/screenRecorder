// Generated by view binder compiler. Do not edit!
package com.example.screenrecorderv2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.screenrecorderv2.R;
import com.makeramen.roundedimageview.RoundedImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutPreviewMediaFileBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imvClose;

  @NonNull
  public final ImageView imvPlay;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout lnControl;

  @NonNull
  public final RoundedImageView thumbnail;

  @NonNull
  public final TextView tvDelete;

  @NonNull
  public final TextView tvEdit;

  @NonNull
  public final TextView tvShare;

  @NonNull
  public final TextView tvTitle;

  private LayoutPreviewMediaFileBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView imvClose, @NonNull ImageView imvPlay, @Nullable LinearLayout lnControl,
      @NonNull RoundedImageView thumbnail, @NonNull TextView tvDelete, @NonNull TextView tvEdit,
      @NonNull TextView tvShare, @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.imvClose = imvClose;
    this.imvPlay = imvPlay;
    this.lnControl = lnControl;
    this.thumbnail = thumbnail;
    this.tvDelete = tvDelete;
    this.tvEdit = tvEdit;
    this.tvShare = tvShare;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutPreviewMediaFileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutPreviewMediaFileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_preview_media_file, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutPreviewMediaFileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imv_close;
      ImageView imvClose = rootView.findViewById(id);
      if (imvClose == null) {
        break missingId;
      }

      id = R.id.imv_play;
      ImageView imvPlay = rootView.findViewById(id);
      if (imvPlay == null) {
        break missingId;
      }

      id = R.id.ln_control;
      LinearLayout lnControl = rootView.findViewById(id);

      id = R.id.thumbnail;
      RoundedImageView thumbnail = rootView.findViewById(id);
      if (thumbnail == null) {
        break missingId;
      }

      id = R.id.tv_delete;
      TextView tvDelete = rootView.findViewById(id);
      if (tvDelete == null) {
        break missingId;
      }

      id = R.id.tv_edit;
      TextView tvEdit = rootView.findViewById(id);
      if (tvEdit == null) {
        break missingId;
      }

      id = R.id.tv_share;
      TextView tvShare = rootView.findViewById(id);
      if (tvShare == null) {
        break missingId;
      }

      id = R.id.tv_title;
      TextView tvTitle = rootView.findViewById(id);
      if (tvTitle == null) {
        break missingId;
      }

      return new LayoutPreviewMediaFileBinding((ConstraintLayout) rootView, imvClose, imvPlay,
          lnControl, thumbnail, tvDelete, tvEdit, tvShare, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
