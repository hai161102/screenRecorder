// Generated by view binder compiler. Do not edit!
package com.mtg.screenrecorder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.mtg.screenrecorder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutVideoSettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ConstraintLayout containerBitRate;

  @NonNull
  public final ConstraintLayout containerFrames;

  @NonNull
  public final ConstraintLayout containerOrientation;

  @NonNull
  public final ConstraintLayout containerResolution;

  @NonNull
  public final AppCompatImageView imvBitRate;

  @NonNull
  public final AppCompatImageView imvFrames;

  @NonNull
  public final AppCompatImageView imvNextBitRate;

  @NonNull
  public final AppCompatImageView imvNextFrames;

  @NonNull
  public final AppCompatImageView imvNextOrientation;

  @NonNull
  public final AppCompatImageView imvNextResolution;

  @NonNull
  public final AppCompatImageView imvOrientation;

  @NonNull
  public final AppCompatImageView imvResolution;

  @NonNull
  public final AppCompatTextView tvBitRate;

  @NonNull
  public final AppCompatTextView tvFrames;

  @NonNull
  public final AppCompatTextView tvOrientation;

  @NonNull
  public final AppCompatTextView tvResolution;

  @NonNull
  public final AppCompatTextView valueBitRate;

  @NonNull
  public final AppCompatTextView valueFrames;

  @NonNull
  public final AppCompatTextView valueOrientation;

  @NonNull
  public final AppCompatTextView valueResolution;

  private LayoutVideoSettingsBinding(@NonNull LinearLayout rootView,
      @NonNull ConstraintLayout containerBitRate, @NonNull ConstraintLayout containerFrames,
      @NonNull ConstraintLayout containerOrientation, @NonNull ConstraintLayout containerResolution,
      @NonNull AppCompatImageView imvBitRate, @NonNull AppCompatImageView imvFrames,
      @NonNull AppCompatImageView imvNextBitRate, @NonNull AppCompatImageView imvNextFrames,
      @NonNull AppCompatImageView imvNextOrientation, @NonNull AppCompatImageView imvNextResolution,
      @NonNull AppCompatImageView imvOrientation, @NonNull AppCompatImageView imvResolution,
      @NonNull AppCompatTextView tvBitRate, @NonNull AppCompatTextView tvFrames,
      @NonNull AppCompatTextView tvOrientation, @NonNull AppCompatTextView tvResolution,
      @NonNull AppCompatTextView valueBitRate, @NonNull AppCompatTextView valueFrames,
      @NonNull AppCompatTextView valueOrientation, @NonNull AppCompatTextView valueResolution) {
    this.rootView = rootView;
    this.containerBitRate = containerBitRate;
    this.containerFrames = containerFrames;
    this.containerOrientation = containerOrientation;
    this.containerResolution = containerResolution;
    this.imvBitRate = imvBitRate;
    this.imvFrames = imvFrames;
    this.imvNextBitRate = imvNextBitRate;
    this.imvNextFrames = imvNextFrames;
    this.imvNextOrientation = imvNextOrientation;
    this.imvNextResolution = imvNextResolution;
    this.imvOrientation = imvOrientation;
    this.imvResolution = imvResolution;
    this.tvBitRate = tvBitRate;
    this.tvFrames = tvFrames;
    this.tvOrientation = tvOrientation;
    this.tvResolution = tvResolution;
    this.valueBitRate = valueBitRate;
    this.valueFrames = valueFrames;
    this.valueOrientation = valueOrientation;
    this.valueResolution = valueResolution;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutVideoSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutVideoSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_video_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutVideoSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.container_bit_rate;
      ConstraintLayout containerBitRate = rootView.findViewById(id);
      if (containerBitRate == null) {
        break missingId;
      }

      id = R.id.container_frames;
      ConstraintLayout containerFrames = rootView.findViewById(id);
      if (containerFrames == null) {
        break missingId;
      }

      id = R.id.container_orientation;
      ConstraintLayout containerOrientation = rootView.findViewById(id);
      if (containerOrientation == null) {
        break missingId;
      }

      id = R.id.container_resolution;
      ConstraintLayout containerResolution = rootView.findViewById(id);
      if (containerResolution == null) {
        break missingId;
      }

      id = R.id.imv_bit_rate;
      AppCompatImageView imvBitRate = rootView.findViewById(id);
      if (imvBitRate == null) {
        break missingId;
      }

      id = R.id.imv_frames;
      AppCompatImageView imvFrames = rootView.findViewById(id);
      if (imvFrames == null) {
        break missingId;
      }

      id = R.id.imv_next_bit_rate;
      AppCompatImageView imvNextBitRate = rootView.findViewById(id);
      if (imvNextBitRate == null) {
        break missingId;
      }

      id = R.id.imv_next_frames;
      AppCompatImageView imvNextFrames = rootView.findViewById(id);
      if (imvNextFrames == null) {
        break missingId;
      }

      id = R.id.imv_next_orientation;
      AppCompatImageView imvNextOrientation = rootView.findViewById(id);
      if (imvNextOrientation == null) {
        break missingId;
      }

      id = R.id.imv_next_resolution;
      AppCompatImageView imvNextResolution = rootView.findViewById(id);
      if (imvNextResolution == null) {
        break missingId;
      }

      id = R.id.imv_orientation;
      AppCompatImageView imvOrientation = rootView.findViewById(id);
      if (imvOrientation == null) {
        break missingId;
      }

      id = R.id.imv_resolution;
      AppCompatImageView imvResolution = rootView.findViewById(id);
      if (imvResolution == null) {
        break missingId;
      }

      id = R.id.tv_bit_rate;
      AppCompatTextView tvBitRate = rootView.findViewById(id);
      if (tvBitRate == null) {
        break missingId;
      }

      id = R.id.tv_frames;
      AppCompatTextView tvFrames = rootView.findViewById(id);
      if (tvFrames == null) {
        break missingId;
      }

      id = R.id.tv_orientation;
      AppCompatTextView tvOrientation = rootView.findViewById(id);
      if (tvOrientation == null) {
        break missingId;
      }

      id = R.id.tv_resolution;
      AppCompatTextView tvResolution = rootView.findViewById(id);
      if (tvResolution == null) {
        break missingId;
      }

      id = R.id.value_bit_rate;
      AppCompatTextView valueBitRate = rootView.findViewById(id);
      if (valueBitRate == null) {
        break missingId;
      }

      id = R.id.value_frames;
      AppCompatTextView valueFrames = rootView.findViewById(id);
      if (valueFrames == null) {
        break missingId;
      }

      id = R.id.value_orientation;
      AppCompatTextView valueOrientation = rootView.findViewById(id);
      if (valueOrientation == null) {
        break missingId;
      }

      id = R.id.value_resolution;
      AppCompatTextView valueResolution = rootView.findViewById(id);
      if (valueResolution == null) {
        break missingId;
      }

      return new LayoutVideoSettingsBinding((LinearLayout) rootView, containerBitRate,
          containerFrames, containerOrientation, containerResolution, imvBitRate, imvFrames,
          imvNextBitRate, imvNextFrames, imvNextOrientation, imvNextResolution, imvOrientation,
          imvResolution, tvBitRate, tvFrames, tvOrientation, tvResolution, valueBitRate,
          valueFrames, valueOrientation, valueResolution);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
